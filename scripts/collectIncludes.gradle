//tag::collectIncludes[]
import static groovy.io.FileType.*
import java.security.MessageDigest

task collectIncludes(
        description: 'collect all ADRs as includes in one file',
        group: 'docToolchain'
) {
    doFirst {
        new File(targetDir, '_includes').mkdirs()
    }
    doLast {
        //let's search the whole project for files, not only the docs folder
        //could be a problem with node projects :-)
        if (scanDir.startsWith('.')) {
            scanDir = file(new File(docDir, scanDir))//.canonicalPath
        }
        logger.info "docToolchain> scanDir: ${scanDir}"

        File sourceFolder = scanDir
        println "sourceFolder: " + sourceFolder.canonicalPath
        def collections = [:]
        sourceFolder.traverse(type: FILES) { file ->
            if (file.name ==~ '^[A-Z]{3}-.*[.](ad|adoc|asciidoc)$') {
                def type = file.name[0..2]
                if (!collections[type]) {
                    collections[type] = []
                }
                collections[type] << (file.canonicalPath - projectDir.canonicalPath)[1..-1]
            }
        }
        def pathDiff = '../' * ((targetDir - scanDir.canonicalPath)
                                    .replaceAll('^/','')
                                    .replaceAll('/$','')
                                    .replaceAll("[^/]",'').size()+1)
        collections.each { type, fileNames ->
            def outFile = new File(targetDir+'/_includes', type+'_includes.adoc')
            outFile.write("// this is autogenerated\n")
            fileNames.each { fileName ->
                outFile.append ("include::../"+pathDiff+fileName.replace("\\", "/")+"[]\n\n")
            }
        }
    }
}


//end::collectIncludes[]

