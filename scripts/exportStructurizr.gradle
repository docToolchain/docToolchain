buildscript {
    repositories {
        maven {
            credentials {
                username mavenUsername
                password mavenPassword
            }
            url mavenRepository
        }
    }
    dependencies {
        classpath 'com.structurizr:structurizr-dsl:1.26.1'
        classpath 'com.structurizr:structurizr-export:1.10.0'
        classpath 'io.github.goto1134:structurizr-d2-exporter:1.2.0'
        classpath 'com.structurizr:structurizr-graphviz:1.7.0'
    }
}

import com.structurizr.dsl.*
import com.structurizr.Workspace
import com.structurizr.export.*
import com.structurizr.export.plantuml.*
import com.structurizr.view.*

// TODO:
// * refactor: extract configuration paramaters
// * provide configuration parameters

//tag::exportStructurizr[]
task exportStructurizr (
        group: 'docToolchain',
        description: 'exports the views of a Structurizr DSL file to diagramms'
) {
    StructurizrDslParser parser = new StructurizrDslParser();
    parser.parse(new File("${docDir}/src/docs/structurizr/workspace.dsl"));
    Workspace workspace = parser.getWorkspace();
    ThemeUtils.loadThemes(workspace);
    StructurizrPlantUMLExporter exporter = new StructurizrPlantUMLExporter();
    Collection<Diagram> diagrams = exporter.export(workspace);
    // Hardcoded sources for the moment
    new File(docDir,"/src/docs/structurizr/diagrams/").mkdirs()
    diagrams.each { diagram ->
        def file = new File(docDir,"/src/docs/structurizr/diagrams/"+diagram.key+".puml")
        file.write(diagram.definition)
        def legend = new File(docDir,"/src/docs/structurizr/diagrams/"+diagram.key+"-key.puml")
        legend.write(diagram.legend.definition)
    }
}
//end::exportStructurizr[]
