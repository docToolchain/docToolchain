/*
 * This build file is part of the docToolchain
 */
buildscript {
    repositories {
        maven {
            credentials {
                username mavenUsername
                password mavenPassword
            }
            url mavenRepository
        }
    }
    dependencies {
        classpath 'org.asciidoctor:asciidoctor-gradle-jvm:4.0.0-alpha.1'
        classpath 'org.asciidoctor:asciidoctor-gradle-jvm-pdf:4.0.0-alpha.1'
        classpath 'org.asciidoctor:asciidoctor-gradle-jvm-gems:4.0.0-alpha.1'
        classpath 'org.asciidoctor:asciidoctor-gradle-jvm-slides:4.0.0-alpha.1'
    }
}

import org.asciidoctor.gradle.jvm.AbstractAsciidoctorTask
import org.asciidoctor.gradle.jvm.AsciidoctorTask
import org.asciidoctor.gradle.jvm.slides.AsciidoctorJRevealJSTask

apply plugin: org.asciidoctor.gradle.jvm.AsciidoctorJPlugin
apply plugin: org.asciidoctor.gradle.jvm.pdf.AsciidoctorJPdfPlugin
apply plugin: org.asciidoctor.gradle.jvm.gems.AsciidoctorGemSupportPlugin
apply plugin: org.asciidoctor.gradle.jvm.slides.AsciidoctorRevealJSPlugin

repositories {
    ruby {
        gems()
    }
}

revealjs {
    version = '4.1.0'

    templateGitHub {
        organisation = 'hakimel'
        repository = 'reveal.js'
        tag = '3.9.1'
    }
}

def color = { color, text ->
    def colors = [black: 30, red: 31, green: 32, yellow: 33, blue: 34, magenta: 35, cyan: 36, white: 37]
    return new String((char) 27) + "[${colors[color]}m${text}" + new String((char) 27) + "[0m"
}

// configuration
if (docDir.startsWith('.')) {
    docDir = new File(projectDir, docDir).canonicalPath
}
logger.info "docToolchain> docDir: ${docDir}"
logger.info "docToolchain> mainConfigFile: ${mainConfigFile}"
logger.info "docToolchain> projectDir: ${projectDir}"
def configSlurper = new ConfigSlurper()
def configFile = new File(docDir, mainConfigFile)
if (configFile.exists()) {
    //ok - nothing to do
} else {
    println "\n${color 'green', """Config file '${configFile.canonicalPath}' does not exist' """}"
    def input = ant.input(message: "\n${color 'green', 'do you want me to create a default one for you?'}", validargs: 'y,n', addproperty: 'yesno')
    if (ant.yesno=="y") {
        configFile.write(new File("./template_config/Config.groovy").text)
    } else {
        throw new Exception("can't continue without a config file")
    }
}
config = configSlurper.parse(configFile.text)
pdfThemeDir = config.pdfThemeDir?config.pdfThemeDir:''
if (pdfThemeDir.startsWith('.')) {
    pdfThemeDir = new File(docDir, pdfThemeDir).canonicalPath
}
logger.info "docToolchain> pdfThemeDir: ${pdfThemeDir}"
inputPath = config.inputPath?config.inputPath:'.'
logger.info "docToolchain> inputPath: ${inputPath}"
def props = project.gradle.startParameter.projectProperties
logger.info("\nGradle project Properties [${props.size()}]:\n${props}\n==============================")

if (project.hasProperty('jiraUser') && project.hasProperty('jiraPass')) {
    logger.info("Found passed Jira credentials")
    config.jira.credentials = "${project.getProperty('jiraUser')}:${project.getProperty('jiraPass')}".bytes.encodeBase64().toString()
}
if (project.hasProperty('confluenceUser') && project.hasProperty('confluencePass')) {
    logger.info("Found passed Confluence credentials")
    config.confluence.credentials = "${project.getProperty('confluenceUser')}:${project.getProperty('confluencePass')}".bytes.encodeBase64().toString()
}
if (project.hasProperty('confluenceBearerToken')) {
    logger.info("Found passed Confluence bearerToken")
    config.confluence.bearerToken = project.getProperty('confluenceBearerToken')
}
if (project.hasProperty('username') && project.hasProperty('password')) {
    logger.info("Found passed common Jira & Confluence credentials")
    config.jira.credentials = "${project.getProperty('username')}:${project.getProperty('password')}".bytes.encodeBase64().toString()
    config.confluence.credentials = "${project.getProperty('username')}:${project.getProperty('password')}".bytes.encodeBase64().toString()
}

referenceDocFile = config.referenceDocFile?config.referenceDocFile:''
logger.info "docToolchain> referenceDocFile: ${referenceDocFile}"
logger.info("\n==================\nParsed config file has ${config.flatten().size()} entries\n")

List<String> confidentialIdentifiers = ["credential", "token", "secret"]
config.flatten().each {key, value ->
    String keyString = "${key}"

    if(confidentialIdentifiers.any {id -> keyString.toLowerCase().contains(id)}){
        logger.info("Found config -> '${keyString}': '********'")
    }else{
        logger.info("Found config -> '${keyString}': '${value}'")
    }
}

ext {
    srcDir  = "${docDir}/${inputPath}"
    if (config.outputPath.startsWith('/') || config.outputPath.matches('^[A-Za-z]:.*$')) {
        targetDir = config.outputPath
    } else {
        targetDir = "${docDir}/${config.outputPath}"
    }
    javaVersion = System.getProperty("java.version")
    currentDate = new Date().format("d. MMM yyyy")
    // where HTMLSanityCheck checking results ares stored
    checkingResultsPath = "${docDir}/${config.outputPath}/report/htmlchecks"
    sourceFiles = config.inputFiles
}

asciidoctorj {
    version = '2.5.7'
    modules {
        diagram.use()
        diagram.version '2.2.7'
    }
    fatalWarnings ~/image to embed not found or not readable/

    attributes  (
        //           'pdf-stylesdir': "${pdfThemeDir}@",
        //           'pdf-style': "custom@",
        //           'pdf-fontsdir': "${pdfThemeDir}/fonts@",
        'source-highlighter': 'highlightjs@',
        'imagesdir': 'images@',
        'toc': 'left@',
        'icons': 'font@',
        'javaVersion'         : "$javaVersion",
        'currentDate'         : "$currentDate",
        'allow-uri-read'      : 'true@',
        'sectanchors'         : 'true@',
        'targetDir'           : targetDir,
        'docDir'              : docDir,
        'projectRootDir'      : "${new File(docDir).canonicalPath}@",
        'data-uri': '',
    )

    // Here we can add the code for extensions we write.
    docExtensions {
        block (name: "jira") {
            parent, target, attributes ->
                options = [
                    "type": ":link",
                    "target": jiraRoot+"/browse/${target}".toString(),
                    "id": "${target}"
                ]

                // Create the link to the issue.
                createPhraseNode(parent, "anchor", target, attributes, options).render()
        }
    }
}
//tag::AsciidoctorTask[]

// common settings for asciidoctor
// this is needed for PDF generation with plantUML
tasks.withType(AbstractAsciidoctorTask) { docTask ->

    baseDirFollowsSourceFile()

    config.taskInputsDirs.each {
        inputs.dir new File(docDir, it)
    }
    config.taskInputsFiles.each {
        inputs.file new File(docDir, it)
    }

    // configure source and output files and folders
    outputDir = file(targetDir)
    sourceDir = file(srcDir)

    // good to see what the build is doing...
    logDocuments = true

    //TODO: write docs
    if (config.rubyExtensions) {
        config.rubyExtensions.each { extension ->
            def root= new File(projectDir.canonicalPath)
            def full= new File(new File(docDir,extension).canonicalPath)
            def relPath = root.toPath().relativize( full.toPath() ).toFile()
            requires += [relPath.toString()]
            logger.info ("added required ruby extension '$full'")
        }
    }
}
//end::AsciidoctorTask[]

//tag::generateHTML[]
task generateHTML (
        type: AsciidoctorTask,
        group: 'docToolchain',
        description: 'use html5 as asciidoc backend') {
        attributes (
            'plantUMLDir'         : file("${docDir}/${config.outputPath}/html5").toURI().relativize(new File("${docDir}/${config.outputPath}/html5/plantUML/").toURI()).getPath(),
        )

    // specify output folder explicitly to avoid cleaning targetDir from other generated content
    outputDir = file(targetDir + '/html5/')

    outputOptions {
        separateOutputDirs = false
        backends = ['html5']
    }

    def sourceFilesHTML = sourceFiles.findAll {
                                'html' in it.formats
                            }
//    onlyIf {
//        sourceFilesHTML
//    }

    sources {
        sourceFilesHTML.each {
            include it.file
            logger.info it.file

            File useFile = new File(srcDir, it.file)
            if (!useFile.exists()) {
                throw new Exception ("""
                The file $useFile in HTML config does not exist!
                Please check the configuration 'inputFiles' in $mainConfigFile.""")
            }
        }
    }
    resources {
        config.imageDirs.each { imageDir ->
            from(new File(file(srcDir),imageDir))
            logger.info ('imageDir: '+imageDir)
            into './images'
        }
        config.resourceDirs.each { resource ->
            from(new File(file(srcDir),resource.source))
            logger.info ('resource: '+resource.source)
            into resource.target
        }
    }

doFirst {
    if (sourceFilesHTML.size()==0) {
        throw new Exception ("""

>> No source files defined for type HTML.
>> Please specify at least one inputFile in your docToolchainConfig.groovy
""")
    }

}
}
//end::generateHTML[]

//tag::generatePDF[]
task generatePDF (
        type: AsciidoctorTask,
        group: 'docToolchain',
        description: 'use pdf as asciidoc backend') {

    attributes (
        'plantUMLDir'         : file("${docDir}/${config.outputPath}/pdf/images/plantUML/").path,
    )

    outputDir = file(targetDir + '/pdf/')

    attributes (
        'data-uri': 'true',
        'plantUMLDir'         : file("${docDir}/${config.outputPath}/images/").path,
        'imagesoutdir'        : file("${docDir}/${config.outputPath}/images/").path
    )

    def sourceFilesPDF = sourceFiles.findAll {
        'pdf' in it.formats
    }
//    onlyIf {
//        sourceFilesPDF
//    }

    sources {
        sourceFilesPDF.each {
            include it.file
            logger.info it.file

            File useFile = new File(srcDir, it.file)
            if (!useFile.exists()) {
                throw new Exception ("""
                The file $useFile in PDF config does not exist!
                Please check the configuration 'inputFiles' in $mainConfigFile.""")
            }
        }
    }

    outputOptions {
        backends = ['pdf']
    }

    /**
    //check if a remote pdfTheme is defined
    def pdfTheme = System.getenv('DTC_PDFTHEME')
    def themeFolder = pdfTheme.md5()
    if (pdfTheme) {
        //check if it is already installed
        //TODO: finish this...
    }
    **/
    doFirst {
            if (sourceFilesPDF.size()==0) {
                throw new Exception ("""

    >> No source files defined for type PDF.
    >> Please specify at least one inputFile in your docToolchainConfig.groovy
    """)
            }

    }
}
//end::generatePDF[]

//tag::generateDocbook[]
task generateDocbook (
        type: AsciidoctorTask,
        group: 'docToolchain',
        description: 'use docbook as asciidoc backend') {

    def sourceFilesDOCBOOK = sourceFiles.findAll {
        'docbook' in it.formats
    }
//    onlyIf {
//        sourceFilesDOCBOOK
//    }

    sources {
        sourceFilesDOCBOOK.each {
            include it.file
            logger.info it.file

            File useFile = new File(srcDir, it.file)
            if (!useFile.exists()) {
                throw new Exception ("""
                The file $useFile in DOCBOOK config does not exist!
                Please check the configuration 'inputFiles' in $mainConfigFile.""")
            }
        }
    }

    outputOptions {
        backends = ['docbook']
    }

    doFirst {
        if (sourceFilesDOCBOOK.size()==0) {
            throw new Exception ("""

    >> No source files defined for type docbook.
    >> Please specify at least one inputFile in your docToolchainConfig.groovy
    """)
        }

    }
}
//end::generateDocbook[]

//tag::generateDeck[]
task generateDeck (
        type: AsciidoctorJRevealJSTask,
        group: 'docToolchain',
        description: 'use revealJs as asciidoc backend to create a presentation') {

    // corresponding Asciidoctor reveal.js config
    // :revealjs_theme:
    theme = 'black'

    revealjsOptions {
        // :revealjs_hideAddressBar:
        hideAddressBarOnMobile = 'true'
        // :revealjs_history:
        pushToHistory = 'true'
        // :revealjs_progress:
        progressBar = 'true'
        // :revealjs_slideNumber:
        slideNumber = 'true'
        // :revealjs_touch:
        touchMode = 'true'
        // :revealjs_transition:
        transition = 'linear'
    }

    attributes (
        'idprefix': 'slide-',
        'idseparator': '-',
        'docinfo1': '',
    )

    def sourceFilesREVEAL = sourceFiles.findAll {
        'revealjs' in it.formats
    }

    sources {
        sourceFilesREVEAL.each {
            include it.file
            logger.info it.file

            File useFile = new File(srcDir, it.file)
            if (!useFile.exists()) {
                throw new Exception ("""
                The file $useFile in REVEAL config does not exist!
                Please check the configuration 'inputFiles' in $mainConfigFile.""")
            }
        }
    }

    outputDir = file(targetDir+'/decks/')

    resources {
        from(sourceDir) {
            include 'images/**'
        }
        into("")
        logger.info "${docDir}/${config.outputPath}/images"
    }

    doFirst {
        if (sourceFilesREVEAL.size()==0) {
            throw new Exception ("""
    >> No source files defined for type 'revealjs'.
    >> Please specify at least one inputFile in your docToolchainConfig.groovy
    """)
        }

    }
}
generateDeck.dependsOn asciidoctorGemsPrepare
//end::generateDeck[]

task install (
    group: 'docToolchain',
    description: 'just a dummy task') {
    doLast {
        System.out.println ("docToolchain is installed");
    }
}

tasks.withType(Copy).configureEach {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}
