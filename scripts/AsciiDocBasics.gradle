/*
 * This build file is part of the docToolchain
 */
buildscript {
    repositories {
        jcenter()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
    }
}
import org.asciidoctor.gradle.AsciidoctorTask

// configuration
def config
if (docDir.startsWith('.')) {
    docDir = new File(projectDir, docDir).canonicalPath
}
if (pdfThemeDir.startsWith('.')) {
    pdfThemeDir = new File(docDir, pdfThemeDir).canonicalPath
}
logger.info "docToolchain> docDir: ${docDir}"
logger.info "docToolchain> mainConfigFile: ${mainConfigFile}"
logger.info "docToolchain> pdfThemeDir: ${pdfThemeDir}"
def configSlurper = new ConfigSlurper()
config = configSlurper.parse(new File(docDir, mainConfigFile).text)
inputPath = config.inputPath?config.inputPath:'.'
logger.info "docToolchain> inputPath: ${inputPath}"
logger.info "docToolchain> inputFiles: ${config.inputFiles}"
logger.info "docToolchain> outputPath: ${config.outputPath}"

ext {
    srcDir  = "${docDir}/${inputPath}"
    targetDir = "${docDir}/${config.outputPath}"
    javaVersion = System.getProperty("java.version")
    currentDate = new Date().format("d. MMM yyyy")
    // where HTMLSanityCheck checking results ares stored
    checkingResultsPath = "${docDir}/${config.outputPath}/report/htmlchecks"
    sourceFiles = config.inputFiles
}



dependencies {
    asciidoctor 'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.15'
    // carefull!
    // asciidoctor 1.5.6 needs diagram 1.5.4.1
    // but then reveal.js is broken...
    // https://github.com/asciidoctor/asciidoctor-diagram/issues/161
    asciidoctor 'org.asciidoctor:asciidoctorj-diagram:1.5.8'
}

asciidoctorj {
    version = '1.5.4'
}

//tag::AsciidoctorTask[]

// common settings for asciidoctor
// this is needed for PDF generation with plantUML
tasks.withType(org.asciidoctor.gradle.AsciidoctorTask) { docTask ->

    config.taskInputsDirs.each {
        inputs.dir new File(docDir, it)
    }
    config.taskInputsFiles.each {
        inputs.file new File(docDir, it)
    }

    // configure source and output files and folders
    outputDir = file(targetDir)
    sourceDir = file(srcDir)

    attributes  (
            'pdf-stylesdir': "${pdfThemeDir}@",
            'pdf-style': 'custom@',
            'source-highlighter': 'coderay@',
            'imagesdir': 'images@',
            'toc': 'left@',
            'icons': 'font@',
            'javaVersion'         : "$javaVersion",
            'currentDate'         : "$currentDate",
            'allow-uri-read'      : 'true@',
//            'sectanchors@'         : true,
            'targetDir'           : targetDir
    )
    // Here we can add the code for extensions we write.
    extensions {
        inlinemacro (name: "jira") {
            parent, target, attributes ->
                options = [
                        "type": ":link",
                        "target": jiraRoot+"/browse/${target}".toString(),
                        "id": "${target}"
                ]

                // Create the link to the issue.
                createInline(parent, "anchor", target, attributes, options).render()
        }
    }

    // good to see what the build is doing...
    logDocuments = true

    requires = ['asciidoctor-diagram']

}
//end::AsciidoctorTask[]



//tag::generateHTML[]
task generateHTML (
        type: AsciidoctorTask,
        group: 'docToolchain',
        description: 'use html5 as asciidoc backend') {

    attributes (
        'plantUMLDir'         : ''
    )
    onlyIf {
        !sourceFiles.findAll {
            'html' in it.formats
        }.empty
    }

    sources {
        sourceFiles.findAll {
            'html' in it.formats
        }.each {
            include it.file
            println it.file
        }
    }

    backends = ['html5']
}
//end::generateHTML[]

//tag::generatePDF[]
task generatePDF (
        type: AsciidoctorTask,
        group: 'docToolchain',
        description: 'use pdf as asciidoc backend') {

    attributes (
        'plantUMLDir'         : file("${docDir}/${config.outputPath}/images/plantUML/").path
    )
    onlyIf {
        !sourceFiles.findAll {
            'pdf' in it.formats
        }.empty
    }

    sources {
        sourceFiles.findAll {
            'pdf' in it.formats
        }.each {
            include it.file
        }
    }

    backends = ['pdf']
}
//end::generatePDF[]

//tag::generateDocbook[]
task generateDocbook (
        type: AsciidoctorTask,
        group: 'docToolchain',
        description: 'use docbook as asciidoc backend') {

    onlyIf {
        !sourceFiles.findAll {
            'docbook' in it.formats
        }.empty
    }

    sources {
        sourceFiles.findAll {
            'docbook' in it.formats
        }.each {
            include it.file
        }
    }

    backends = ['docbook']
}
//end::generateDocbook[]

//tag::generateDeck[]
task generateDeck (
        type: AsciidoctorTask,
        group: 'docToolchain',
        description: 'use revealJs as asciidoc backend to create a presentation') {

    attributes (
            'plantUMLDir'  : '',
            'idprefix': 'slide-',
            'idseparator': '-',
            'docinfo1': '',
            'revealjs_theme': 'black',
            'revealjs_progress': 'true',
            'revealjs_touch': 'true',
            'revealjs_hideAddressBar': 'true',
            'revealjs_transition': 'linear',
            'revealjs_history': 'true',
            'revealjs_slideNumber': 'true'
    )
    options template_dirs : [new File('resources/asciidoctor-reveal.js','templates/slim').absolutePath ]

    onlyIf {
        !sourceFiles.findAll {
            'revealjs' in it.formats
        }.empty
    }

    sources {
        sourceFiles.findAll {
            'revealjs' in it.formats
        }.each {
            include it.file
        }

    }

    outputDir = file(targetDir+'/decks/')

    resources {
        from('resources') {
            include 'reveal.js/**'
        }
        from(sourceDir) {
            include 'images/**'
        }
        into("ppt")
        logger.info "${docDir}/${config.outputPath}/ppt/images"
    }
}
//end::generateDeck[]
