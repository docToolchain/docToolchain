
//tag::downloadTemplate[]
task downloadTemplate(
    description: 'Download a specified template and install it',
    group: 'docToolchain helper'
) {
    doFirst {
    }
    doLast {
        def color = { color, text ->
            def colors = [black: 30, red: 31, green: 32, yellow: 33, blue: 34, magenta: 35, cyan: 36, white: 37]
            return new String((char) 27) + "[${colors[color]}m${text}" + new String((char) 27) + "[0m"
        }
        def lang, help
        def templates = [arc42:"https://github.com/arc42/arc42-template/raw/master/dist/arc42-template-${->lang}-${->help}-asciidoc.zip"]
        for (int i=1; i<20; i++) {
            def template = System.getenv('DTC_TEMPLATE' + i) ?: ""
            if (template) {
                def name = template.replaceAll("^.*/","").replaceAll(/.zip$/,"")
                templates << [(name):template]
            }
        }
        def template = 'arc42'
        if (templates.size()>1) {
            def prompt = ""
            templates.eachWithIndex { templateName, url, i ->
                prompt += "\n ${color 'green', "${i+1}) $templateName"}"
            }
            ant.input(message: "${color 'green', "Which template do you want to install?"}$prompt\n", validargs: (1..templates.size()).join(","), addproperty: 'template')
            template = templates.keySet()[(ant.template as Integer)-1]
        }
        println "${color 'green', 'Install '+template+' documentation template.'}"
        def targetDir = new File(new File(docDir, inputPath), 'arc42')
        targetDir.mkdirs()
        if (template=='arc42') {
            println "For more information about arc42 see https://arc42.org"
            /**
             if (targetDir.exists()) {println "${targetDir.canonicalPath} already exists"
             println "in order to re-install the template, please remove the folder first and re-run the script"
             throw new RuntimeException("Template folder already exists")}**/
            ant.input(message: "${color 'green', 'Which language do you want to install?'}", validargs: 'EN,DE,ES,IT,NL,UA', addproperty: 'lang')
            ant.input(message: "${color 'green', 'Do you want the template with or without help?'}", validargs: 'withhelp,plain', addproperty: 'help')
            lang = ant.lang
            help = ant.help
        }
        download.run {
            src templates[template]
            dest new File(targetDir, 'template.zip')
            overwrite true
        }
        copy {
            from zipTree(new File(targetDir, 'template.zip'))
            into targetDir
        }
        delete {
            delete new File(targetDir, 'template.zip')
        }
        println "${template} template unpacked into ${targetDir}"
        //re-organize content
        //move images folder
        new File(targetDir, '../images/.').mkdirs()
        copy {
            from (new File(targetDir, 'images/.'))
            into new File(targetDir, '../images/.')
        }
        delete new File(targetDir, 'images/.')
        new File(targetDir, 'src').renameTo(new File(targetDir, 'chapters'))
        //add jbake header
        new File(targetDir, 'chapters').eachFileRecurse { file->
            if (file.name.endsWith('.adoc') && file.name ==~ /[0-9]+_.*/) {
                def text = file.getText('utf-8')
                def title = ""
                text.eachLine { line ->
                    if (title=="" && line.startsWith('=')) {
                        title = line.split("[ \t]+",2)[1]
                    }
                }
                text = """\
:jbake-title: $title
:jbake-type: page_toc
:jbake-status: published
:jbake-menu: arc42
:jbake-order: ${file.name.split("_")[0] as Integer}
:filename: ${file.canonicalPath-targetDir.canonicalPath}
ifndef::imagesdir[:imagesdir: ../../images]

:toc:

"""+text
                file.write(text,'utf-8')
            }
        }
        new File(targetDir, 'arc42-template.adoc').renameTo(new File(targetDir, 'arc42.adoc'))
        def configAdoc = new File(targetDir,'chapters/config.adoc')
        configAdoc.write(configAdoc.text.replaceAll("[.]/images","../images"),'utf-8')
        def mainDoc = new File(targetDir,'arc42.adoc')
        mainDoc.write(":imagesdir: ../images\n:jbake-menu: -\n"+mainDoc.text.replaceAll('src/','chapters/'),'utf-8')
        //write asciidoctorconfig for editor preview
        new File(targetDir,'/chapters/.asciidoctorconfig.adoc').write(':imagesdir: ../../images\n\n', 'utf-8')
        new File(targetDir,'/.asciidoctorconfig.adoc').write(':imagesdir: ../images\n\n', 'utf-8')
        //add arc42.doc to config
        def configFile = new File(docDir, mainConfigFile)
        configFile.write(
            configFile.text
                .replaceAll('[, \\t\\r\\n]+/[*]{2} inputFiles [*]{2}/',
                            ",\n\t[file: 'arc42/arc42.adoc', formats: ['html','pdf']],\n\t/** inputFiles **/")
                .replaceAll('/[*]{2} imageDirs [*]{2}/',
                            "'images/.',\n\t/** imageDirs **/")
                .replaceAll('[, \\t\\r\\n]+/[*]{2} imageDirs [*]{2}/',
                            ",\n\t'images/.',\n\t/** imageDirs **/")
                .replaceAll("\\[,","["),
    
                'utf-8'
        )
        println "added template to ${mainConfigFile}"
        println "use 'generateHTML', 'generatePDF' or  'generateSite' to convert the template"

    }
}
//end::downloadTemplate[]
