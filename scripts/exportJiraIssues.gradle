buildscript {
    repositories {
        jcenter()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        //for the exportJiraIssues Task
        classpath 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.2'
    }
}

//tag::exportJiraIssues[]
task exportJiraIssues(
        description: 'exports all jira issues from a given search',
        group: 'docToolchain'
) {
    doLast {
        def configFile = new File(docDir, mainConfigFile)
        def config = new ConfigSlurper().parse(configFile.text)

        if(config.jira.credentials.isEmpty()){
            logger.quiet("No JIRA credentials are set in '${configFile.name}'")
            logger.quiet("Trying 'jiraUser' and 'jiraPassword' from gradle properties")

            if(project.hasProperty("jiraUser") && project.hasProperty("jiraPass")){
                if (!jiraPass) {
                    // FIXME Currently doesn't work with Gradle daemon. See: https://github.com/gradle/gradle/issues/1251
                     jiraPass = System.console().readPassword("Jira password for user '$jiraUser': ")
                }
                config.jira.credentials = "${jiraUser}:${jiraPass}".bytes.encodeBase64().toString()
            }else{
                logger.quiet("Variables 'jiraUser' and/or 'jiraPassword' are not set!")
                logger.quiet("Please specify them with other Jira properties through Config.groovy, or even better via the CLI or environment variables")
            }

        } else {
            logger.quiet("Found JIRA credentials in '${configFile.name}'. Consider passing these via environment variables")
        }

        // map configuration from Config.groovy to existing variables for compatibility with naming of Jira settings in gradle.properties
        jiraRoot = config.jira.api
        jiraJql = config.jira.jql
        jiraProject = config.jira.project
        jiraLabel = config.jira.label
        jiraResultsFilename = config.jira.resultsFilename
        jiraDateTimeFormatParse = config.jira.dateTimeFormatParse
        jiraDateTimeOutput = config.jira.dateTimeFormatOutput

        def jira = new groovyx.net.http.RESTClient(jiraRoot + '/rest/api/2/')
        jira.encoderRegistry = new groovyx.net.http.EncoderRegistry(charset: 'utf-8')
        def headers = [
                'Authorization': "Basic " + config.jira.credentials,
                'Content-Type' : 'application/json; charset=utf-8'
        ]
        def openIssues = new File(targetDir, jiraResultsFilename)
        openIssues.write(".Table {Title}\n", 'utf-8')
        openIssues.append("|=== \n")
        openIssues.append("|Key |Priority |Created | Assignee | Summary\n", 'utf-8')
        println jiraJql.replaceAll('%jiraProject%', jiraProject).replaceAll('%jiraLabel%', jiraLabel)
        jira.get(path: 'search',
                query: ['jql'       : jiraJql.replaceAll('%jiraProject%', jiraProject).replaceAll('%jiraLabel%', jiraLabel),
                        'maxResults': 1000,
                        'fields'    : 'created,resolutiondate,priority,summary,timeoriginalestimate, assignee'
                ],
                headers: headers
        ).data.issues.each { issue ->
            openIssues.append("| <<${issue.key}>> ", 'utf-8')
            openIssues.append("| ${issue.fields.priority.name} ", 'utf-8')
            openIssues.append("| ${Date.parse(jiraDateTimeFormatParse, issue.fields.created).format(jiraDateTimeOutput)} ", 'utf-8')
            openIssues.append("| ${issue.fields.assignee ? issue.fields.assignee.displayName : 'not assigned'} ", 'utf-8')
            openIssues.append("| ${jiraRoot}/browse/${issue.key}[${issue.fields.summary}]\n", 'utf-8')
        }
    }
}
//end::exportJiraIssues[]
